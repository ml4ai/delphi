
.. _program_listing_file_lib_ExperimentStatus.cpp:

Program Listing for File ExperimentStatus.cpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_lib_ExperimentStatus.cpp>` (``lib/ExperimentStatus.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "ExperimentStatus.hpp"
   #include <nlohmann/json.hpp>
   
   using namespace std;
   using namespace delphi::utils;
   using json = nlohmann::json;
   
   // set our data to the start state
   void ExperimentStatus::enter_initial_state() {
     set_state(0.0, "Empty", false);
   }
   
   // set our data to begin preliminary data reading
   void ExperimentStatus::enter_reading_state() {
     set_state(0.0, "Creating experiment", true);
   }
   
   // set our data to begin recording progress
   void ExperimentStatus::enter_working_state() {
     set_state(0.0, "In progress", true);
     start_recording_progress();
   }
   
   // set our data to begin writing to database
   void ExperimentStatus::enter_writing_state() {
     stop_recording_progress();
     set_state(0.99, "Writing to database", true);
   }
   
   // set our data to the end state
   void ExperimentStatus::enter_finished_state(string status) {
     set_state(1.0, status, false);
   }
   
   // set the complete data for the database row
   void ExperimentStatus::set_state(
       double progress, 
       string status,
       bool busy) {
     set_progress(progress);
     json data;
     data[EXPERIMENT_ID] = experiment_id;
     data[PROGRESS] = progress;
     data[STATUS] = status;
     data[BUSY] = busy;
     write_data(data);
   }
   
   void ExperimentStatus::populate_table() {
     string query = "SELECT " + COL_ID + " FROM " + EXPERIMENT_TABLE + ";";
     vector<string> ids = database->read_column_text(query);
     for(string id : ids) {
       json row = database->select_row(EXPERIMENT_TABLE, id, COL_STATUS);
       if(row.contains(COL_STATUS)) {
         string status = row[COL_STATUS];
         if(status == COMPLETED) {
           json data;
           data[EXPERIMENT_ID] = id;
           data[PROGRESS] = 1.0;
           data[STATUS] = "complete";
           data[BUSY] = false;
           insert_data(id, data);
         }
       }
     }
   }
