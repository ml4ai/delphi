openapi: 3.0.0

info:
  title: GrFN spec
  description: Grounded Function Network (GrFN) schema specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@email.arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.2.7

paths: {}

components:

  schemas:

    system_def:
      title: <system_def>
      description: >
        Specification of a GrFN system consisting of one or
        more GrFN files.
        With imports, the system must represent a DAG.
      required:
        - date_created
        - name
        - components
      properties:
        date_created:
          type: string
          format: date-time
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/grfn_ref'

    grfn_ref:
      title: <grfn_ref>
      description: >
        Specifies a GrFN def file that is part of a GrFN system.
        "imports" (optional) specifies list of any GrFN files
        that need to also be loaded due to dependencies.
      required:
        - name
      properties:
        file_path:
          $ref: '#/components/schemas/file_path'
        imports:
          type: array
          items:
            $ref: '#/components/schemas/file_path'

    grfn_def:
      title: <grfn_def>
      description: >
        The top-level structure of the GrFN definition derived
        from Program Analysis of source code.
      required:
        - date_created
        - source
        - identifiers
        - variables
        - functions
      properties:
        date_created:
          type: string
          format: date-time
          description: >
            Date and time that current GrFN was generated.
        source:
          description:
            Path(s) to source code file(s) that were analyzed.
          type: array
          items:
            $ref: '#/components/schemas/file_path'
        start:
          type: array
          items:
            $ref: '#/components/schemas/function_name'
          description:
            (optional) Top-level entry-points into program
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/identifier_def'
        types:
          type: array
          items:
            $ref: '#/components/schemas/type_def'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/variable_def'
        functions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/function_assign_def'
              - $ref: '#/components/schemas/function_container_def'
        grounding:
          type: array
          items:
            $ref: '#/components/schemas/link_hypothesis'

    link_hypothesis:
      title: <link_hypothesis>
      description: >
        A commutative binary relation representing a hypothesized
        link between two <semantic_element>s:
          (elm1=A, elm2=B) == (elm1=B, elm2=A)
      required:
        - element_1
        - element_2
        - score
      properties:
        element_1:
          $ref: '#/components/schemas/link_element'
        element_2:
          $ref: '#/components/schemas/link_element'
        score:
          type: number
          format: float

    link_element:
      title: <link_element>
      description: >
        A grounding hypothesis link element.<br>
        "type": identifier (<variable_name>, <function_name>, <type_name>),
        content_span, text_span, equation_term, or ontology_term
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum:
            - identifier
            - comment_span
            - text_span
            - equation_term
            - ontology_term
        source:
          type: string
        content:
          type: string
        content_type:
          type: string
          enum:
            - definition
            - units
            - constraint

    identifier_def:
      title: <identifier_def>
      description: >
        Defines a source code identifier, the context of it's creation
        and use, and associates with it a unique gensym.
      required:
        - name
        - base_name
        - scope
        - namespace
        - source_refs
        - gensym
      properties:
        type:
          type: string
          enum:
            - variable
            - function
            - type
        base_name:
          $ref: '#/components/schemas/base_name'
        scope:
          $ref: '#/components/schemas/scope_path'
        namespace:
          $ref: '#/components/schemas/namespace_path'
        source_refs:
          type: array
          items:
            $ref: '#/components/schemas/source_code_ref'
        gensym:
          $ref: '#/components/schemas/gensym'

    base_name:
      title: <base_name>
      description: >
        The identifier name (when available) that was used in the
        original source code.
      type: string

    scope_path:
      title: <scope_path>
      description: >
        Array of names identifying a program scope.
      type: array
      items:
        type: string

    scope_path_string:
      title: <scope_path_string>
      description: >
        String representation of a `<scope_path>`.
        String names that make up components of the path are
        expressed in order, separated by periods.
      example:
        '"foo.loop$1.loop$2"'
      type: string

    namespace_path:
      title: <namespace_path>
      description: >
        Array of names representing a namespace.
      type: array
      items:
        type: string

    namespace_path_string:
      title: <namespace_path_string>
      description: >
        Single string representation of a `<namespace_path>`.
        String names that make up components of the path are
        expressed in order, separated by periods.
      example:
        '"foo.bar.baz"'
      type: string

    gensym:
      title: <gensym>
      description: >
        String representation of a unique gensym.
        Used as identifiers in lambdas and other source code
        generated from GrFN.
      type: string

    variable_name:
      title: <variable_name>
      description: >
        `"@variable::<namespace_path_string>::<scope_path_string>::<base_name>::<index>"`
      type: string

    function_name:
      title: <function_name>
      description: >
        `"@function::<namespace_path_string>::<scope_path_string>::<base_name>"`<br>
        where:<br>
        `<base_name> ::= <function_type>[$[<var_affected>|<code_given_name>]]`
      type: string

    type_name:
      title: <type_name>
      description: >
        String denoting a non-primitive type; will have a corresponding unique
        `<type_spec>`:
        `"@type::<namespace_path_string>::<scope_path_string>::<base_name>"`
      type: string

    literal_name:
      title: <literal_name>
      description: >
        String representing a literal value:
          `"@literal::<type>::<value>"`<br>
        where `<type>` is any primitive type:
          "integer" | "float" | "boolean" | "string"<br>
        TODO: generalize to any <type> (requires move to structured object)
      type: string

    type_def:
      title: <type_def>
      description: >
        Define a non-primitive type.
      required:
        - name
        - type
      properties:
        name:
          $ref: '#/components/schemas/type_name'
        type:
          type: string
          enum:
            - "type"
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/attribute_def'

    attribute_def:
      title: <attribute_def>
      description: >
        Define an attribute of a `<type>`.
      required:
        - name
        - value_type
      properties:
        name:
          type: string
        value_type:
          $ref: '#/components/schemas/type'

    variable_def:
      title: <variable_def>
      description: >
        The specification of a variable hosting a value.
      required:
        - name
        - index
        - domain
        - mutable
      properties:
        name:
          $ref: '#/components/schemas/variable_name'
        index:
          type: integer
        domain:
           $ref: '#/components/schemas/type'
        domain_constraints:
          type: string
          description: >
            String representing a disjunctive normal form representation
            with v = variable value, for example:<br>
            `"(or (and (< v infty) (>= v 5)) (and (> v -infty) (< v 0)))"`
        mutable:
          type: string
          enum:
            - true
            - false
          default: true

    function_assign_def:
      title: <function_assign_def>
      description: >
        Define a function setting the value of a variable.
      required:
        - name
        - type
        - arguments
        - return_value
      properties:
        type:
          type: string
          enum:
            - assign
            - condition
            - decision
        lambda_source:
          $ref: '#/components/schemas/lambda_function_source_ref'
        arguments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/variable_name'
              - $ref: '#/components/schemas/function_name'
              - $ref: '#/components/schemas/literal_name'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/variable_name'
        return_value:
          $ref: '#/components/schemas/variable_name'

    function_container_def:
      title: <function_container_def>
      description: >
        Define a function with a function subnetwork body.
        Flow through the function body depends on value
        of container "type":<br>
        "container" = flow through once<br>
        "loop" = repeat flow through.
      required:
        - name
        - type
        - arguments
        - return_value
        - body
      properties:
        name:
          $ref: '#/components/schemas/function_name'
        type:
          type: string
          enum:
            - container
            - loop
        arguments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/variable_name'
              - $ref: '#/components/schemas/function_name'
              - $ref: '#/components/schemas/literal_name'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/variable_name'
        return_value:
          $ref: '#/components/schemas/variable_name'
        body:
          type: array
          items:
            $ref: '#/components/schemas/function_wiring'

    function_wiring:
      title: <function_wiring>
      description: >
        Defines the "wiring" of container functions,
        specifying associations of variables to function
        arguments ("input") and the function return_value ("output").
      required:
        - function
        - input
        - output
      properties:
        function:
          $ref: '#/components/schemas/function_ref'
        input:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/variable_name'
              - $ref: '#/components/schemas/function_name'
              - $ref: '#/components/schemas/literal_name'
        output:
          $ref: '#/components/schemas/variable_name'
        updated:
          type: array
          items:
            $ref: '#/components/schemas/variable_name'

    function_ref:
      title: <function_ref>
      description:
        A `<function_ref>` is either<br>
        (1) `<function_name>` denoting a function specification
        (generally another container function).<br>
        (2) `<lambda_function_source_ref>` denoting an executable
        lambda function.<br>
      required:
        - name
        - type
      properties:
        name:
          oneOf:
            - $ref: '#/components/schemas/function_name'
            - $ref: '#/components/schemas/lambda_function_source_ref'
        type:
          description: >
            Indicate whether "function" is a
            `<function_name>` or `<lambda_function_source_ref>`.
          type: string
          enum:
            - function_name
            - lambda_source

    lambda_function_source_ref:
      title: <lambda_function_source_ref>
      description:
        String representation of a path/reference to a function
        in `lambda.py`.
      type: string

    source_code_ref:
      title: <source_code_ref>
      description: >
        Reference to the location within the a source code file.
      required:
        - source_ref
        - file_path
      properties:
        source_ref:
          type: string
        file_path:
          $ref: '#/components/schemas/file_path'

    file_path:
      title: <file_path>
      description: >
        String representation of the path to a file.
      type: string

    type:
      title: <type>
      description: Root type.
      oneOf:
        - $ref: '#/components/schemas/type_type_def'
        - $ref: '#/components/schemas/type_integer'
        - $ref: '#/components/schemas/type_float'
        - $ref: '#/components/schemas/type_boolean'
        - $ref: '#/components/schemas/type_string'
        - $ref: '#/components/schemas/type_array'
        - $ref: '#/components/schemas/type_list'
        - $ref: '#/components/schemas/type_map'
        - $ref: '#/components/schemas/type_hashmap'
        - $ref: '#/components/schemas/type_tuple'

    type_type_def:
      title: <type_type_def>
      description: >
        Indicator of a user-defined `<type_def>`.
        "name" is a `<type_name>` that identifies the `<type_def>`.
      required:
        - name
        - type
      properties:
        name:
          $ref: '#/components/schemas/type_name'
        type:
          type: string
          enum:
            - "type"

    type_integer:
      title: <type_integer>
      description: >
        Primitive scalar integer
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "integer"
        type:
          type: string
          enum:
            - "type"

    type_float:
      title: <type_float>
      description: >
        Primitive scalar float
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "float"
        type:
          type: string
          enum:
            - "type"

    type_boolean:
      title: <type_boolean>
      description: >
        Primitive scalar boolean
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "boolean"
        type:
          type: string
          enum:
            - "type"

    type_string:
      title: <type_string>
      description: >
        Primitive scalar string
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "string"
        type:
          type: string
          enum:
            - "type"

    type_array:
      title: <type_array>
      description: >
        Array primitive type.
        Dimension integers can only be positive.
        The "element_type" specifies the `<type>` of the
        elements in the array.
      required:
        - name
        - type
        - dimensions
        - element_type
      properties:
        name:
          type: string
          enum:
            - "array"
        type:
          type: string
          enum:
            - "type"
        dimensions:
          description: >
            Array of integers defining size of each array dimension.
          type: array
          items:
            type: integer
            minimum: 1
        index_start:
          description: >
            Array of integers defining start index of each dimension.
            This field is optional. If left out, assumption is each
            dimension has a start index of 0.
          type: array
          items:
            type: integer
        element_type:
           $ref: '#/components/schemas/type'

    type_list:
      title: <type_list>
      description: >
        List primitive type.
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "list"
        type:
          type: string
          enum:
            - "type"

    type_map:
      title: <type_map>
      description: >
        Map primitive type.
      required:
        - name
        - type
      properties:
        name:
          type: string
          enum:
            - "map"
        type:
          type: string
          enum:
            - "type"

    type_hashmap:
      title: <type_hashmap>
      description: >
        A Map who's keys have a "key_type" `<type>`.
      required:
        - name
        - type
        - key_type
      properties:
        name:
          type: string
          enum:
            - "hashmap"
        type:
          type: string
          enum:
            - "type"
        key_type:
          $ref: '#/components/schemas/type'

    type_tuple:
      title: <type_tuple>
      description: >
        Tuple primitive type.
        "element_types" is an array of the `<types>` of each
        element of the tuple.
        The order of `<types>` in "elemennt_types" corresponds
        to the order of elements in the tuple.
      required:
        - name
        - type
        - element_types
      properties:
        name:
          type: string
          enum:
            - "tuple"
        type:
          type: string
          enum:
            - "type"
        element_types:
          type: array
          items:
            $ref: '#/components/schemas/type'

externalDocs:
  description: Find more information here
  url: 'https://ml4ai.github.io/delphi/grfn_spec.html'
