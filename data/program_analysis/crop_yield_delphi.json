// Thoughts on translating from AST to DBN json (below)
// trace through variables that have any functional relation
// AST functions -> DBN function:
//    Assign : assign
//    Loop : loop_plate
//    If : assign (complex): "compress" Assigns
// other local function calls are just about wiring among variables
//    including multiple-value return and assignment (e.g., line 28)

{
  // names file that was analyzed
  "name": "crop_yield.py",

  // made it up!
  "dateCreated": "2018-05-20 10:00:00.000000",

  // declarations of variables that were accumulated during traversal
  "variables": [
    {
      "name": "MAX_RAIN",
      "dtype": "real",
    },
    {
      "name": "CONSISTENCY",
      "dtype": "real",
    },
    {
      "name": "ABSORPTION",
      "dtype": "real",
    },
    {
      "name": "YIELD_EST",
      "dtype": "real",
    },
    {
      "name": "TOTAL_RAIN",
      "dtype": "real",
    }
  ],

  // specifies dynamic Bayes net (DBN)
  // as set of functions that wire up the variables
  "functions": [

    // initial setter functions - work like deterministic priors
    {
      "name": "CROP_YIELD.assign_MAX_RAIN",
      "type": "assign",
      "sources": [],
      "target": "MAX_RAIN",
      "body": ["set", "MAX_RAIN", 4.0]
    },
    {
      "name": "CROP_YIELD.assign_CONSISTENCY",
      "type": "assign",
      "sources": [],
      "target": "CONSISTENCY",
      "body": ["set", "CONSISTENCY", 64.0]
    },
    {
      "name": "CROP_YIELD.assign_ABSORPTION",
      "type": "assign",
      "sources": [],
      "target": "ABSORPTION",
      "body": ["set", "ABSORPTION", 0.6]
    },
    {
      "name": "CROP_YIELD.assign_YIELD_EST",
      "type": "assign",
      "sources": [],
      "target": "YIELD_EST",
      "body": ["set", "YIELD_EST", 0]
    },
    {
      "name": "CROP_YIELD.assign_TOTAL_RAIN",
      "type": "assign",
      "sources": [],
      "target": "TOTAL_RAIN",
      "body": ["set", "TOTAL_RAIN", 0]
    },

    // This is essentially the top-level environment
    {
      "name": "CROP_YIELD",
      "type": "top",  // ?  "dbn", "environment"
      "sources": [],
      "target": [ "YIELD_EST" ],  // "return"
      "body": [  // specifies wiring
        {
          "function": "CROP_YIELD.assign_MAX_RAIN",
          "input": [],
          "output": "MAX_RAIN"
          }
        },
        {
          "function": "CROP_YIELD.assign_CONSISTENCY",
          "input": [],
          "output": "CONSISTENCY"
        },
        {
          "function": "CROP_YIELD.assign_ABSORPTION",
          "input": [],
          "output": "ABSORPTION"
        },
        {
          "function": "CROP_YIELD.assign_YIELD_EST",
          "input": [],
          "output": "YIELD_EST"
        },
        {
          "function": "CROP_YIELD.assign_TOTAL_RAIN",
          "input": [],
          "output": "TOTAL_RAIN"
        },
        {
          "function": "CROP_YIELD_loop_1",
          "input": [ "TOTAL_RAIN", "MAX_RAIN", "CONSISTENCY", "ABSORPTION" ],
          "output": ""  // None ?
        }
      ]
    },

    // functions used in loop plate
    {
      "name": "CROP_YIELD_loop_1.assign_RAIN",
      "type": "assign",
      "sources": [
        "DAY", "CONSISTENCY", "MAX_RAIN", "ABSORPTION"
      ],
      "target": "RAIN",
      "body": "lambda lineno=26"
    },
    {
      "name": "UPDATE_EST.assign_TOTAL_RAIN",
      "type": "assign",
      "sources": [
        "TOTAL_RAIN", "RAIN"
      ],
      "target": "TOTAL_RAIN"
      "body": "lambda lineno=4"
    },
    {
      "name": "UPDATE_EST.assign_YIELD_EST",  // compiles 'if'
      "type": "assign",
      "sources": [
        "TOTAL_RAIN"
      ]
      "target": "YIELD_EST",
      "body": "lambda lineop=[6, 9]"
    },

    // loop plate
    {
      "name": "CROP_YIELD_loop_1",
      "type": "loop_plate",
      // was "sources", but seems more appropriate as "variables"
      // "variables" is the local environment for the loop plate
      "variables": [ "TOTAL_RAIN", "MAX_RAIN", "CONSISTENCY", "ABSORPTION" ],
      // don't think "target" is relevant
      // "target": [],
      "index_variable": "DAY",
      "index_iteration_range": [ 1, ["+", 31, 1] ],  // needs work
      "body": [  // specifies wiring
        {
          "function": "CROP_YIELD_loop_1.assign_RAIN",
          "input": [
            {
              "variable": "DAY",
              "index": 0
            },
            {
              "variable": "CONSISTENCY",
              "index": -1
            },
            {
              "variable": "MAX_RAIN",
              "index": -1
            },
            {
              "ABSORPTION": "ABSORPTION",
              "index": -1
            }
          ],
          "output": {
            "variable": "RAIN",
            "index": 0
          }
        },
        {
          "function": "UPDATE_EST.assign_TOTAL_RAIN",
          "input": [
            {
              "variable": "TOTAL_RAIN",
              "index": -1
            },
            {
              "variable": "RAIN",
              "index": 0
            }
          ],
          "output": {
            "variable": "TOTAL_RAIN",
            "index": 0
          }
        },
        {
          "function": "UPDATE_EST.assign_YIELD_EST",
          "input": [
            {
              "variable": "TOTAL_RAIN",
              "index": 0
            }
          ],
          "output": {
            "variable": "YIELD_EST",
            "index": 0
          }
        }
        // Note: could have another nested loop here.
        // but semantics requires unrolled representation
      ]
    }
  ]
}