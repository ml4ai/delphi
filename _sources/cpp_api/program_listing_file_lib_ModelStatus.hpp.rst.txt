
.. _program_listing_file_lib_ModelStatus.hpp:

Program Listing for File ModelStatus.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_lib_ModelStatus.hpp>` (``lib/ModelStatus.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <sqlite3.h>
   #include "DatabaseHelper.hpp"
   #include "BaseStatus.hpp"
   #include "utils.hpp"
   #include <thread>
   #include <ctime>
   #include <chrono>
   #include <nlohmann/json.hpp>
   
   using namespace std;
   using json = nlohmann::json;
   
   // maintain a table just for Model training 
   class ModelStatus : public BaseStatus {
   
     private:
       string model_id = "N/A";
   
     protected:
       void set_state(double progress, string status, bool busy);
       void populate_table();
   
   
     public:
       ModelStatus(string model_id) : BaseStatus(
         "ModelStatus",
         "model_status",
         model_id
       ), model_id(model_id) {}
   
       ModelStatus(string model_id, Database* database) : BaseStatus(
         "ModelStatus",
         "model_status",
         model_id,
         database
       ), model_id(model_id) {}
   
       ~ModelStatus(){}
   
       string get_id(){return model_id;}
       void enter_initial_state();
       void enter_reading_state();
       void enter_working_state();
       void enter_writing_state();
       void enter_finished_state(string status);
   
       // serialized JSON fields in the status text
       const string MODEL_ID = "id"; // API
       const string NODES = "nodes"; // API
       const string EDGES = "edges"; // API
       const string TRAINED = "trained"; // API
   
       // delphi model table
       const string MODEL_TABLE = "delphimodel";
       const string COL_MODEL = "model";
   };
