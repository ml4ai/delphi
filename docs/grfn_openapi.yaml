openapi: 3.0.0

info:
  title: GrFN Spec
  description: Grounded Function Network Specification
  contact:
    name: Clayton T. Morrison
    email: claytonm@email.arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.2.0

paths: {}

components:

  schemas:

    system_def:
      description: >
        Specification of a GrFN system consisting of one or
        more GrFN_spec files.
        With imports, the system must represent a DAG.
      required:
        - date_created
        - name
        - components
      properties:
        date_created:
          type: string
          format: date-time
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/grfn_spec_refs'

    grfn_spec_refs:
      description: >
        Specifies a GrFN_spec file that is part of a GrFN system.
        imports (optional) specifies list of any GrFN_spec files
        that need to also be loaded
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/namespace_path_string'
        imports:
          type: array
          items:
            $ref: '#/components/schemas/namespace_path_string'

    scope_path:
      description: >
        Program analysis will assign a unique name to each scope.
        For example, given these unique names, the scopes of two
        inner loops within the outputer loop  of function `foo`
        in the following example

        ```
        def foo():
          for i in range(10):    # assigned name 'loop$1'
            for j in range(10):  # assigned name 'loop$1'
                                 #  (in the scope of outer loop$1)
              x = i * j
            for k in range(10):  # assigned name 'loop$2'
              z = x + 1          #  (in the scope of outer loop$2)
        ```

        ... would be uniquely specified by the following paths
        (respectively)

        ```
            ["foo", "loop$1", "loop$1"]
            ["foo", "loop$1", "loop$2"]
        ```

        The "top" level of the file (i.e., not enclosed within another
        program block context) will be assigned the default empty string
        scope, "".  All other scopes are either explicitly named
        (such as a named function), or are assigned a unique name by
        program anlysis according to the rules of the type of scope
        (such as container, loop, conditional, etc.).
      type: array
      items:
        type: string

    scope_path_string:
      description: >
        A single string representation of a `scope_path`.
        String names that make up components of the path are
        expressed in order, separated by periods.
      example:
        '"foo.loop$1.loop$2"'
      type: string

    namespace_path:
      description: >
        Different languages have different conventions for defining
        namespaces, but in general they are either

        1. explicitly defined within source code by namespace
        declarations (such as Fortran "modules" or C++ "namespaces"s), or

        2. implicitly defined by the project directory structure


        within which the file is located (as in Python).


        In the case of namespaces defined by the project directory
        structure, two files in different locations in the project
        directory tree may have the same name. To distinguish these,
        program anlaysis will capture the path of the directory tree
        from the root to the file. The final name in the path, which
        is the name of the source file, will drop the extension.
        For example, the namespace for the file `baz.py` within the
        following directory tree


        ```

        foo/
            bar/
                baz.py
        ```

        would be uniquely specified by the following path


        ```
        ["foo", "bar", "baz"]
        ```


        In the case of declared namespaces, the namespace declaration
        will determine the path (which may only consist of one string
        name).
        It is not necessary within GrFN to independently declare a
        namespace; like the `<scope_path>`, we specify the
        `<namespace_path>` within an identifier declaration as a list
        of strings under teh "namespace" attribute in the identifier
        declaration.
        Like the `<scope_path>`, the string names of the path uniquely
        defining the namespace are in in order from general to specific,
        with the last string name either being the implicit namespace
        defined by the source code file, or the user-defined name of
        the namespace.
      type: array
      items:
        type: string

    namespace_path_string:
      description: >
        A single string representation of a `namespace_path`.
        String names that make up components of the path are
        expressed in order, separated by periods.
      example:
        '"foo.bar.baz"'
      type: string

externalDocs:
  description: Find more information here
  url: 'http://TODO'
