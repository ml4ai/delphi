"""
    File: strings.py
    Purpose: Code implementing string objects (corresponding to the Fortran
        CHARACTER type) in the code generated by for2py.

    Usage: see the document "for2py: Miscellaneous constructs"
"""

class String:
    def __init__(self, length = 0, value = ""):
        if length > 0:
            self._length = length
        else:
            self._length = len(value)

        # Before value is assigned to self._val, it may need to be adjusted
        # if len(value) != length
        self.set_value(value)

    def value(self, obj):
        if isinstance(obj, String):
            return obj._val
        else:
            return obj

    def set_value(self, string):
        s = self.value(string)
        n = len(s)
        if n < self._length:    # pad with blanks
            k = self._length - n
            self._val = s + " " * k
        else:                   # truncate to self._length
            self._val = s[:self._length]

    def __len__(self):
        return self._length

    def __add__(self, other):
        """String concatenation"""
        return self._val + self.value(other)

    def adjustl(self):
        return self._val.lstrip()

    def adjustr(self):
        return self._val.rstrip()

    def index(self, substring, direction=[]):
        """index() returns the position within a string where substring first
           occurs; 0 if there is no such occurrence.  If the argument 
           direction contains "back" the string is searched backwards starting
           from the end."""
        substr = value(substring)
        if "back" in direction:
            pos = self._val.rfind(substr)
        else:
            pos = self._val.find(substr)

        return pos + 1

    def len_trim(self):
        return len(self._val.rstrip())

    def repeat(self, n):
        return self._val * n

    def trim(self):
        return self._val.rstrip()

    def __str__(self):
        return self._val
