openapi: 3.0.0
servers:
  - url: 'https://icm.causeex.twosixlabs.com/icm'
info:
  description: Causal Exploration ICM API
  version: 3.3.3
  title: Causal Exploration ICM API
  contact:
    email: causeex-help@twosixlabs.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: icm
    description: CRUD operations for ICMs
  - name: icmOp
    description: 'ICM Operations such as branch, fuse, query, diff, etc.'
  - name: misc
    description: Miscellaneous operations
paths:
  /icm:
    post:
      tags:
        - icm
      summary: Create a new ICM
      description: ''
      operationId: createNewICM
      deprecated: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICMMetadata'
        '400':
          description: Unsupported operation
        '405':
          description: Validation / Input exception
      requestBody:
        content:
          application/ld+json:
            schema:
              type: string
        description: Create a new ICM by providing RDF
        required: true
    get:
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      tags:
        - icm
      summary: List all ICMs
      description: >
        retrieve all ICM UUIDs from a provider.

        TODO: It is envisioned that this API call will need additional
        parameters
         (e.g. search constraints - against title, description, for a user,
        last modified, derived from, etc.. really based on anything

        captured in the metadata)

        UI interactions: search for actor, ...

        Also requires argument to limit the number of ICMMetadata results to

        return in a given list() call.
      operationId: listAllICMs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
  '/icm/{uuid}':
    parameters:
      - $ref: '#/components/parameters/uuid'
    get:
      tags:
        - icm
      summary: Fetch an ICM by UUID
      description: Returns the metadata associated with an ICM
      operationId: getICMByUUID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICMMetadata'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
    delete:
      tags:
        - icm
      summary: Deletes an ICM
      description: Delete an ICM by UUID
      operationId: deleteICM
      responses:
        '204':
          description: Successful deletion without a response
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '415':
          description: Unsupported operation
    patch:
      tags:
        - icm
      summary: Update the metadata for an existing ICM
      description: Partial update of metadata - does not require id property
      operationId: updateICMMetadata
      responses:
        '200':
          description: Successful update without a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICMMetadata'
        '400':
          description: Invalid UUID supplied
        '404':
          description: UUID not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICMMetadata'
        description: ICM metadata to merge with the current metadata
        required: true
  '/icm/{uuid}/primitive':
    parameters:
      - $ref: '#/components/parameters/uuid'
    get:
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      tags:
        - icm
      summary: returns all ICM primitives (TODO - needs filter support)
      operationId: getICMPrimitives
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Entity'
                    - $ref: '#/components/schemas/Relationship'
                    - $ref: '#/components/schemas/CausalRelationship'
                    - $ref: '#/components/schemas/ConfigurationVariable'
                    - $ref: '#/components/schemas/CausalVariable'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '415':
          description: Unsupported operation
    post:
      tags:
        - icm
      summary: create a new causal primitive
      operationId: createICMPrimitive
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Entity'
                - $ref: '#/components/schemas/Relationship'
                - $ref: '#/components/schemas/CausalRelationship'
                - $ref: '#/components/schemas/ConfigurationVariable'
                - $ref: '#/components/schemas/CausalVariable'
        required: true
        description: input primitive with properties
      responses:
        '201':
          description: Created. Returns the created primitive with ICM provided defaults and ID.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Entity'
                  - $ref: '#/components/schemas/Relationship'
                  - $ref: '#/components/schemas/CausalRelationship'
                  - $ref: '#/components/schemas/ConfigurationVariable'
                  - $ref: '#/components/schemas/CausalVariable'       
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
  '/icm/{uuid}/primitive/{prim_id}':
    parameters:
      - $ref: '#/components/parameters/uuid'
      - name: prim_id
        in: path
        description: ID of ICM primitive (ICM specific ID)
        required: true
        schema:
          type: string
    get:
      tags:
        - icm
      summary: returns a specific causal primitive
      operationId: getICMPrimitive
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Entity'
                  - $ref: '#/components/schemas/Relationship'
                  - $ref: '#/components/schemas/CausalRelationship'
                  - $ref: '#/components/schemas/ConfigurationVariable'
                  - $ref: '#/components/schemas/CausalVariable'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Primitive not found
        '415':
          description: Unsupported operation
    patch:
      tags:
        - icm
      summary: update an existing ICM primitive (can use this for disable?)
      description: >-
        Partial update of a primitive - does not require baseType or id
        properties
      operationId: updateICMPrimitive
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Entity'
                - $ref: '#/components/schemas/Relationship'
                - $ref: '#/components/schemas/CausalRelationship'
                - $ref: '#/components/schemas/ConfigurationVariable'
                - $ref: '#/components/schemas/CausalVariable'
        required: true
        description: input primitive with properties
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Entity'
                  - $ref: '#/components/schemas/Relationship'
                  - $ref: '#/components/schemas/CausalRelationship'
                  - $ref: '#/components/schemas/ConfigurationVariable'
                  - $ref: '#/components/schemas/CausalVariable'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Primitive not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
    delete:
      tags:
        - icm
      summary: delete (disable) this ICM primitive
      operationId: deleteICMPrimitive
      responses:
        '204':
          description: Successful Operation
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Primitive not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/primitive/{prim_id}/evidence':
    parameters:
      - $ref: '#/components/parameters/uuid'
      - name: prim_id
        in: path
        description: ID of causal primitive to retrieve evidence (ICM specific ID)
        required: true
        schema:
          type: string
    get:
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      tags:
        - icm
      summary: returns evidence for a causal primitive (needs pagination support)
      operationId: getEvidenceForID
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evidence'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Primitive not found
        '415':
          description: Unsupported operation
    post:
      tags:
        - icm
      summary: attach evidence to a primitive
      operationId: attachEvidence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evidence'
        required: true
        description: input evidence with properties
      responses:
        '201':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Primitive not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
  '/icm/{uuid}/evidence/{evid_id}':
    parameters:
      - $ref: '#/components/parameters/uuid'
      - name: evid_id
        in: path
        description: ID of this evidence item
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - icm
      summary: returns an individual piece of evidence
      operationId: getEvidenceByID
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Evidence not found
        '415':
          description: Unsupported operation
    patch:
      tags:
        - icm
      summary: update evidence item
      description: Partial update of a piece of evidence - does not require id property
      operationId: updateEvidence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evidence'
        required: true
        description: input evidence with properties
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Evidence not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
    delete:
      tags:
        - icm
      summary: delete evidence item
      operationId: deleteEvidence
      responses:
        '204':
          description: Successful Operation
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Evidence not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/recalculate':
    parameters:
      - $ref: '#/components/parameters/uuid'
    post:
      tags:
        - icmOp
      summary: >-
        indication that it is safe to recalculate/recompose model after
        performing some number of CRUD operations
      operationId: recalculateICM
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/archive':
    parameters:
      - $ref: '#/components/parameters/uuid'
    post:
      tags:
        - icmOp
      summary: archive an ICM
      operationId: archiveICM
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/branch':
    parameters:
      - $ref: '#/components/parameters/uuid'
    post:
      tags:
        - icmOp
      summary: branch an ICM
      operationId: branchICM
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICMMetadata'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
  /icm/fuse:
    post:
      tags:
        - icmOp
      summary: fuse two ICMs
      operationId: fuseICMs
      parameters:
        - name: uuid1
          in: query
          description: UUID of first ICM to fuse
          required: true
          schema:
            type: string
            format: uuid
        - name: uuid2
          in: query
          description: UUID of second ICM to fuse
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'returns a new ICM, fusing the two ICMs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICMMetadata'
        '400':
          description: Invalid UUID(s) supplied
        '404':
          description: ICM(s) not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/sparql':
    parameters:
      - $ref: '#/components/parameters/uuid'
    post:
      tags:
        - icmOp
      summary: Query the ICM using SPARQL
      deprecated: true
      description: >
        execute a SPARQL or SPARQL Update Query (e.g., UPDATE, DELETE, etc.)
        https://www.w3.org/TR/sparql11-update/

        TODO: need to capture expected UI queries, as well as those expected to
        be supported by the ICM provider.
      operationId: query
      responses:
        '200':
          description: >-
            successful operation; returns the results of the SPARQL query in
            whatever content type requested
        '405':
          description: Invalid SPARQL query
      requestBody:
        content:
          application/sparql-query:
            schema:
              type: string
        description: the SPARQL / SPARQL Update query
        required: true
  '/icm/{uuid}/experiment/forwardProjection':
    parameters:
      - $ref: '#/components/parameters/uuid'
    post:
      tags:
        - icmOp
      summary: Execute a "what if" projection over the model
      operationId: forwardProjection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intervention'
        required: true
        description: Description of experiment to perform
      responses:
        '202':
          description: Experiment accepted / Execution underway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '405':
          description: Validation / Input exception
        '415':
          description: Unsupported operation
        '429':
          description: Too many requests
  '/icm/{uuid}/experiment':
    parameters:
      - $ref: '#/components/parameters/uuid'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
    get:
      tags:
        - icmOp
      summary: list active (running or completed) experiments
      operationId: getExperiments
      responses:
        '200':
          description: active (running or completed) experiments
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Intervention'
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM not found
        '415':
          description: Unsupported operation
  '/icm/{uuid}/experiment/{exp_id}':
    parameters:
      - $ref: '#/components/parameters/uuid'
      - name: exp_id
        in: path
        description: UUID of the experiment
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - icmOp
      summary: Fetch experiment results
      operationId: getExperiment
      responses:
        '200':
          description: Experiment results
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InterventionResult'
        '202':
          description: Experiment running
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Experiment not found
        '415':
          description: Unsupported operation
    delete:
      tags:
        - icmOp
      summary: Delete experiment
      operationId: deleteExperiment
      responses:
        '204':
          description: Experiment deleted successfully
        '400':
          description: Invalid UUID supplied
        '404':
          description: ICM / Experiment not found
        '415':
          description: Unsupported operation
  /version:
    get:
      tags:
        - misc
      summary: Get the version of the ICM API supported
      description: Get the version of the ICM API supported
      operationId: getVersion
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Version'
  /ping:
    get:
      tags:
        - misc
      summary: Get the health status of the ICM server
      operationId: ping
      responses:
        '200':
          description: All systems OK
        '206':
          description: Model training
        '424':
          description: Not ready - systems initializing
components:
  securitySchemes:
    causeex_auth:
      type: http
      scheme: basic
  parameters:
    uuid:
      name: uuid
      in: path
      description: UUID of ICM
      required: true
      schema:
        type: string
        format: uuid
    offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: The number of items to skip before starting to collect the result set.
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      required: false
      description: The number of items to return.
  schemas:
    ICMProvider:
      type: string
      enum:
        - BAE
        - BBN
        - STR
        - DUMMY
    LifecycleState:
      type: string
      enum:
        - PROPOSED
        - APPROVED
        - EXPERIMENTAL
        - OPERATIONAL
        - SUSPENDED
        - ARCHIVED
        - CREATED
    ICMMetadata:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        icmProvider:
          $ref: '#/components/schemas/ICMProvider'
        title:
          type: string
        version:
          type: integer
        created:
          type: string
          format: date-time
        createdByUser:
          $ref: '#/components/schemas/User'
        lastAccessed:
          type: string
          format: date-time
        lastAccessedByUser:
          $ref: '#/components/schemas/User'
        lastUpdated:
          type: string
          format: date-time
        lastUpdatedByUser:
          $ref: '#/components/schemas/User'
        estimatedNumberOfPrimitives:
          type: integer
          format: int64
          minimum: 0
          description: estimated number of causal primitives
        lifecycleState:
          $ref: '#/components/schemas/LifecycleState'
        derivation:
          description: >-
            if this ICM was derived from one or more ICMs, include lineage as
            necessary
          type: array
          items:
            type: string
            format: uuid
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
    ServerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: some server generated UUID that can be used to reference a request
        message:
          type: string
    Range:
      type: object
      description: Top level range object used in a CausalVariable
      required:
        - baseType
        - range
      discriminator:
        propertyName: baseType
      properties:
        baseType:
          type: string
          description: >-
            object type - used for inheritance. See
            https://swagger.io/specification/#discriminatorObject
    IntegerRange:
      allOf:
        - $ref: '#/components/schemas/Range'
        - type: object
          description: The range for an integer value
          properties:
            range:
              type: object
              properties:
                min:
                  description: >-
                    the lower limit for a value - range has no lower bound if
                    left unspecified
                  type: integer
                  format: int64
                max:
                  description: >-
                    the upper limit for a value - range has no upper bound if
                    left unspecified
                  type: integer
                  format: int64
                step:
                  description: the step size for possible values
                  type: integer
                  format: int64
    FloatRange:
      allOf:
        - $ref: '#/components/schemas/Range'
        - type: object
          description: The range for a floating point value
          properties:
            range:
              type: object
              properties:
                min:
                  description: >-
                    the lower limit for a value - range has no lower bound if
                    left unspecified
                  type: number
                  format: double
                max:
                  description: >-
                    the upper limit for a value - range has no upper bound if
                    left unspecified
                  type: number
                  format: double
                step:
                  description: the step size for possible values
                  type: number
                  format: double
    BooleanRange:
      allOf:
        - $ref: '#/components/schemas/Range'
        - type: object
          description: Denotes a boolean range
          properties:
            range:
              description: 'A dummy range, because a boolean can only be true or false'
              type: object
    EnumRange:
      allOf:
        - $ref: '#/components/schemas/Range'
        - type: object
          description: The range of values an enumeration value may equal
          properties:
            range:
              description: >-
                The range of possible enumeration values ordered from smallest
                to largest
              type: array
              items:
                type: string
              example:
                - LOW
                - MEDIUM
                - HIGH
    Value:
      type: object
      description: Top level value object used in a TimeSeriesValue
      required:
        - baseType
        - value
      discriminator:
        propertyName: baseType
      properties:
        baseType:
          type: string
          description: >-
            object type - used for inheritance. See
            https://swagger.io/specification/#discriminatorObject
    IntegerValue:
      allOf:
        - $ref: '#/components/schemas/Value'
        - type: object
          description: An integer value
          properties:
            value:
              type: integer
              format: int64
    FloatValue:
      allOf:
        - $ref: '#/components/schemas/Value'
        - type: object
          description: A floating point value
          properties:
            value:
              type: number
              format: double
    BooleanValue:
      allOf:
        - $ref: '#/components/schemas/Value'
        - type: object
          description: A boolean value
          properties:
            value:
              type: boolean
    EnumValue:
      allOf:
        - $ref: '#/components/schemas/Value'
        - type: object
          description: An enumeration value
          properties:
            value:
              type: string
    DistributionValue:
      allOf:
        - $ref: '#/components/schemas/Value'
        - type: object
          description: A distribution of numeric values ordered from smallest to largest
          properties:
            value:
              type: array
              items:
                type: number
                format: double
              example:
                - 0.1
                - 0.2
                - 0.7
    TimeSeriesState:
      type: string
      description: Indication of the state of a variable at a given time
      enum:
        - ACTIVE
        - INACTIVE
        - UNKNOWN
    TimeSeriesValue:
      type: object
      description: Time series value at a particular time
      required:
        - timestep
        - value
      properties:
        active:
          $ref: '#/components/schemas/TimeSeriesState'
        time:
          type: string
          format: date-time
          description: the value of a variable at this particular time
        timestep:
          type: integer
          description: the value at a particular time step
        value:
          description: the value of a variable
          $ref: '#/components/schemas/Value'
    CausalPrimitive:
      type: object
      description: >-
        Top level object that contains common properties that would apply to any
        causal primitive (variable, relationship, etc.)
      required:
        - baseType
      discriminator:
        propertyName: baseType
      properties:
        baseType:
          type: string
          description: >-
            object type - used for inheritance. See
            https://swagger.io/specification/#discriminatorObject
        namespaces:
          type: array
          description: (JSON-LD @context) key/value pairs
          items:
            type: object
            additionalProperties:
              type: string
            example:
              actor: 'http://example.com/actor#'
        types:
          type: array
          description: (JSON-LD @text) classification of the ODP individual
          items:
            type: string
        editable:
          type: boolean
          default: true
          description: flag to indicate allowed/supported operation
        disableable:
          type: boolean
          default: true
          description: flag to indicate allowed/supported operation
        disabled:
          type: boolean
          default: false
          description: >-
            safer alternative to DELETE-ing a causal primitive to avoid
            difficult management of side-effects and rollback
        id:
          type: string
          description: used to uniquely identify the causal primitive within in the ICM
        label:
          type: string
          description: user friendly label for this primitive (e.g. Weakens)
        description:
          type: string
          description: longer text description for this primitive
        lastUpdated:
          type: string
          format: date-time
          description: timestamp of the last update to this primitive
    Entity:
      allOf:
        - $ref: '#/components/schemas/CausalPrimitive'
        - type: object
          description: 'API definition of an entity. '
          properties:
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: ICM defined confidence measure for this variable
    CausalVariable:
      allOf:
        - $ref: '#/components/schemas/CausalPrimitive'
        - type: object
          description: 'API definition of a causal variable. '
          required:
            - range
          properties:
            units:
              type: string
              description: user friendly unit label for this variable (e.g. barrels/day)
            backingEntity:
              type: string
              description: >
                context to resolve the causal variable - should be the ID of an
                Entity in the ICM graph
            lastKnownValue:
              $ref: '#/components/schemas/TimeSeriesValue'
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: ICM defined confidence measure for this variable
            range:
              $ref: '#/components/schemas/Range'
    ConfigurationVariable:
      allOf:
        - $ref: '#/components/schemas/CausalPrimitive'
        - type: object
          description: >-
            Account for pieces of the causal graph that may help interpretation
            or expose "knobs" that might be editable by the user.
          properties:
            lastKnownValue:
              $ref: '#/components/schemas/TimeSeriesValue'
    CausalRelationship:
      allOf:
        - $ref: '#/components/schemas/CausalPrimitive'
        - type: object
          description: >-
            API defintion of a causal relationship. Indicates causality between
            two causal variables.
          required:
            - source
            - target
          properties:
            source:
              type: string
              description: ID of source variable in the relationship
            target:
              type: string
              description: ID of target variable in the relationship
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: ICM defined confidence measure for this relationship
            strength:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: >-
                ICM defined strength of this relationship (expressed visually as
                line width)
            reinforcement:
              type: boolean
              description: >-
                reinforcement of the effect (e.g. "dampening (false) vs
                reinforcing (true)").
    Relationship:
      allOf:
        - $ref: '#/components/schemas/CausalPrimitive'
        - type: object
          description: API definition of a generic relationship between two primitives
          required:
            - source
            - target
          properties:
            source:
              type: string
              description: ID of source variable in the relationship
            target:
              type: string
              description: ID target variable in the relationship
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: ICM defined confidence measure for this relationship
    Evidence:
      type: object
      description: >-
        Object that holds a reference to evidence (either KO from TA1 or human
        provided).
      properties:
        id:
          type: string
          format: uuid
          description: used to uniquely identify the evidence within in the ICM
        link:
          type: string
          description: optional IRI link to evidence in the KO
        description:
          type: string
          description: >-
            some human readable sentence or paragraph that was used to derive
            the data
        category:
          type: string
          description: where was the data sourced from (TODO - make enumeration?)
        rank:
          type: integer
          format: int32
          minimum: 0
          maximum: 10
          description: some TA2 ranking on the significance of this evidence
    Projection:
      type: object
      properties:
        numSteps:
          type: integer
          format: int32
        stepSize:
          type: string
          description: some TBD format that needs to be flushed out.
    Intervention:
      type: object
      description: structure used for experimentation
      properties:
        id:
          type: string
          format: uuid
          description: UUID of this experiment (provided by server)
        label:
          type: string
          description: user friendly description/label for this intervention
        interventions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the ICM primitive under experiment
              values:
                $ref: '#/components/schemas/TimeSeriesValue'
        projection:
          $ref: '#/components/schemas/Projection'
        options:
          type: object
          properties:
            timeout:
              type: integer
              format: int32
              description: experimentation timeout (in seconds)
    InterventionResult:
      type: object
      description: Notional model of experiment results
      properties:
        id:
          type: string
          format: uuid
          description: UUID of this intervention
        projection:
          $ref: '#/components/schemas/Projection'
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the ICM primitive under experiment
              baseline:
                $ref: '#/components/schemas/TimeSeriesValue'
              intervened:
                $ref: '#/components/schemas/TimeSeriesValue'
    Version:
      type: object
      properties:
        icmVersion:
          type: string
          description: >-
            the version of the ICM API supported, as defined by this Swagger
            file
        icmProviderVersion:
          type: string
          description: the version of the provider's implementation
