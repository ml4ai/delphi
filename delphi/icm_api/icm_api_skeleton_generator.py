""" Script to generate the skeleton of a Flask REST API from an OpenAPI 3.0
YAML specification. """

from ruamel.yaml import YAML

yaml = YAML(typ="safe")
with open("icm_api.yml", "r") as f:
    yml = yaml.load(f)

lines = []

lines.append(
    """\
import uuid
import pickle
from datetime import datetime
from enum import Enum, unique
from typing import Optional, List
from dataclasses import dataclass, field, asdict
from flask import Flask, jsonify, request

app = Flask(__name__)"""
)


def process_properties(schema_name, schema, lines, class_declaration):
    lines.append("\n\n@dataclass")
    lines.append(class_declaration)
    lines.append(
        '    """'
        + f"{schema.get('description', f'Placeholder docstring for class {schema_name}.')}"
        + ' """'
    )
    properties = schema["properties"]
    required_properties = schema.get("required", [])

    for property in properties:
        property_type = properties[property].get(
            "type", properties[property].get("$ref", "").split("/")[-1]
        )
        mapping = {
            "string": "str",
            "integer": "int",
            "None": "",
            "array": "List",
            "boolean": "bool",
            "number": "float",
            "object": "object",
        }
        type_annotation = mapping.get(property_type, property_type)
        if type_annotation == "List":
            property_type = properties[property]["items"]["type"]
            type_annotation = (
                f"List[{mapping.get(property_type, property_type)}]"
            )
        if property not in required_properties:
            type_annotation = f"Optional[{type_annotation}]"
        lines.append(f"    {property}: {type_annotation}")


schemas = yml["components"]["schemas"]

for schema_name, schema in schemas.items():
    if schema.get("type") == "object":
        class_declaration = f"class {schema_name}:"
        process_properties(schema_name, schema, lines, class_declaration)
    elif schema.get("allOf") is not None:
        parents = [
            item["$ref"].split("/")[-1]
            for item in schema["allOf"]
            if item.get("$ref")
        ]
        schema = schema["allOf"][1]
        class_declaration = f"class {schema_name}({','.join(parents)}):"
        process_properties(schema_name, schema, lines, class_declaration)
    elif "enum" in schema:
        lines.append("@unique")
        lines.append(f"class {schema_name}(Enum):")
        for option in schema["enum"]:
            lines.append(f"    {option} = '{option}'")

paths = yml["paths"]

for url, metadata in paths.items():
    parameters = metadata.pop("parameters", None)
    for http_method in metadata:
        modified_path = url.replace("{", "<string:").replace("}", ">")
        lines.append(
            f"\n\n@app.route('{modified_path}', methods=['{http_method.upper()}'])"
        )
        if parameters is not None:
            args = ",".join(
                [
                    x
                    for x in [
                        parameter.get("$ref", "").split("/")[-1]
                        for parameter in parameters
                    ]
                    if x != ""
                ]
            )
        else:
            args = ""
        lines.append(f"def {metadata[http_method]['operationId']}({args}):")
        lines.append(
            '    """' + f" {metadata[http_method]['summary']}" + '"""'
        )
        lines.append("    pass")

lines.append(
    """\
if __name__ == "__main__":
    app.run(debug=True)"""
)

with open("icm_api_autogenerated_skeleton.py", "w") as f:
    f.write("\n".join(lines))
