# Workflow for continuous integration and testing

name: Continuous Integration

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    if: github.repository == 'ml4ai/delphi'
    strategy:
      matrix:
        os: [ubuntu-20.04]


    steps:
    - uses: actions/checkout@v2

    - name: Continuous Integration
      env:
        DELPHI_DB: /tmp/delphi.db
      run: |
        sudo apt-get update
        sudo apt-get install -y\
            libboost-all-dev\
            pkg-config\
            cmake\
            curl\
            git\
            tar\
            wget\
            python3-dev\
            python3-venv\
            graphviz\
            libgraphviz-dev\
            libsqlite3-dev\
            libeigen3-dev\
            pybind11-dev\
            libfmt-dev\
            librange-v3-dev\
            nlohmann-json3-dev

        echo "### Checking whether we have OpenMP support"
        echo |cpp -fopenmp -dM |grep -i open

        pwd
        echo "### Building Served from source"
        curl -LO https://github.com/meltwater/served/archive/refs/tags/v1.6.0.tar.gz
        tar -xzf v1.6.0.tar.gz
        pushd served-1.6.0
          mkdir build
          cd build
          cmake ..
          sudo make -j `nproc` install
        popd
       

        # Download delphi.db
        mkdir -p data && curl http://vanga.sista.arizona.edu/delphi_data/delphi.db -o $DELPHI_DB
        echo "DELPHI_DB = $DELPHI_DB"

        # Create a virtual environment
        python3 -m venv delphi_venv

        # Activate the virtual environment
        source delphi_venv/bin/activate

        # Install wheel
        pip install wheel

        # Install a version of pyparsing to fix a CI bug
        pip install pyparsing==2.4.7
        pip intstall SQLAlchemy==1.3.18
        pip intstall flask==1.1.2

        # Install delphi in editable mode
        pip install -e .[test]

        # Run the Python WM test suite
        pytest -s tests/wm/test_cpp_evaluation.py
        pytest -s tests/wm/test_cpp_extensions.py
        pytest -s tests/wm/test_rest_api.py

        pwd
        echo "### Building and running Python tests"


        pwd
        echo "### Building the Delphi REST API"
        # Build the Delphi REST API server program
        pushd build
          cmake ..
          make -j `nproc` delphi_rest_api

          echo "### Running the Delphi REST API"
          # Run the api as a background process
          ./delphi_rest_api &
        popd

        # Test the Delphi with Bash scripts
        pushd tests/wm/scripts
          ./get_system_status
        popd
